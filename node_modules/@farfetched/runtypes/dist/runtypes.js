function o(r) {
  return {
    isData: r.guard,
    getErrorMessages(t) {
      const e = r.validate(t);
      return e.success ? [] : e.details ? u(e.details) : [e.message];
    }
  };
}
function u(r, t, e) {
  const n = a(t, e);
  return typeof r == "string" ? n ? [`${n}: ${r}`] : [r] : Array.isArray(r) ? r.flatMap(
    (i, s) => u(i, n, s.toString())
  ) : Object.entries(r).flatMap(
    ([i, s]) => u(s, n, i)
  );
}
function a(r, t) {
  return r && t ? `${r}.${t}` : r ?? t;
}
export {
  o as runtypeContract
};
